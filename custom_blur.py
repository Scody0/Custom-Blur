import tkinter as tk
from tkinter import ttk, messagebox
import pygetwindow as gw
import ctypes
import customtkinter as ctk
from collections import deque
import json
import os
import logging
from datetime import datetime

GWL_EXSTYLE = -20
WS_EX_LAYERED = 0x80000
LWA_ALPHA = 0x2
ACCENT_ENABLE_BLURBEHIND = 3
ACCENT_ENABLE_ACRYLICBLURBEHIND = 4
WCA_ACCENT_POLICY = 19
DWMWA_EXTENDED_FRAME_BOUNDS = 9

user32 = ctypes.windll.user32
dwmapi = ctypes.windll.dwmapi
SetWindowLong = user32.SetWindowLongW
GetWindowLong = user32.GetWindowLongW
SetLayeredWindowAttributes = user32.SetLayeredWindowAttributes
SetWindowCompositionAttribute = user32.SetWindowCompositionAttribute
DwmSetWindowAttribute = dwmapi.DwmSetWindowAttribute

class ACCENT_POLICY(ctypes.Structure):
    _fields_ = [
        ("AccentState", ctypes.c_int),
        ("AccentFlags", ctypes.c_int),
        ("GradientColor", ctypes.c_int),
        ("AnimationId", ctypes.c_int)
    ]

class WINDOWCOMPOSITIONATTRIBDATA(ctypes.Structure):
    _fields_ = [
        ("Attribute", ctypes.c_int),
        ("Data", ctypes.c_void_p),
        ("SizeOfData", ctypes.c_size_t)
    ]

LOCALIZATION = {
    "en": {
        "title": "Custom Blur",
        "windows": "Windows",
        "refresh": "üîÑ Refresh",
        "auto_refresh": "Auto-Refresh",
        "transparency": "Transparency",
        "blur_effect": "Blur Effect",
        "enable_blur": "Enable Blur",
        "blur_type": ["Standard Blur", "Acrylic Blur"],
        "blur_opacity": "Blur Opacity",
        "blur_intensity": "Blur Intensity",
        "tint_opacity": "Tint Opacity",
        "undo": "‚ü≤ Undo",
        "reset": "üîÑ Reset",
        "about": "About",
        "save_profile": "Save Profile",
        "load_profile": "Load Profile",
        "ready": "Ready",
        "window_list_refreshed": "Window list refreshed",
        "selected": "Selected: {}",
        "window_not_found": "Window not found!",
        "transparency_set": "Transparency: {}",
        "blur_enabled": "Blur enabled",
        "blur_disabled": "Blur disabled",
        "blur_type_set": "Blur type: {}",
        "blur_opacity_set": "Blur opacity: {}",
        "blur_intensity_set": "Blur intensity: {}",
        "tint_opacity_set": "Tint opacity: {}",
        "changes_undone": "Changes undone",
        "nothing_to_undo": "Nothing to undo",
        "reset_complete": "Window reset to original state",
        "profile_saved": "Profile saved",
        "profile_loaded": "Profile loaded",
        "profile_error": "Error handling profile",
        "language": "Language",
        "error": "Error",
        "window_incompatible": "This window does not support blur effects",
        "tooltip_refresh": "Refresh the list of active windows",
        "tooltip_auto_refresh": "Automatically refresh the window list",
        "tooltip_transparency": "Adjust window transparency (50-255)",
        "tooltip_enable_blur": "Enable or disable blur effect",
        "tooltip_blur_type": "Choose between standard or acrylic blur",
        "tooltip_blur_opacity": "Adjust blur opacity (0-255)",
        "tooltip_blur_intensity": "Adjust blur strength (0-100)",
        "tooltip_tint_opacity": "Adjust background tint opacity (0-255)",
        "tooltip_undo": "Undo the last change",
        "tooltip_reset": "Reset window to original state",
        "tooltip_save_profile": "Save current settings as a profile",
        "tooltip_load_profile": "Load a saved profile",
        "tooltip_language": "Select application language",
        "tooltip_about": "View information about the program"
    },
    "ru": {
        "title": "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –±–ª—é—Ä",
        "windows": "–û–∫–Ω–∞",
        "refresh": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        "auto_refresh": "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "transparency": "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å",
        "blur_effect": "–≠—Ñ—Ñ–µ–∫—Ç –±–ª—é—Ä–∞",
        "enable_blur": "–í–∫–ª—é—á–∏—Ç—å –±–ª—é—Ä",
        "blur_type": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª—é—Ä", "–ê–∫—Ä–∏–ª–æ–≤—ã–π –±–ª—é—Ä"],
        "blur_opacity": "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –±–ª—é—Ä–∞",
        "blur_intensity": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –±–ª—é—Ä–∞",
        "tint_opacity": "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ—Ç—Ç–µ–Ω–∫–∞",
        "undo": "‚ü≤ –û—Ç–º–µ–Ω–∏—Ç—å",
        "reset": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
        "about": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
        "save_profile": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        "load_profile": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        "ready": "–ì–æ—Ç–æ–≤–æ",
        "window_list_refreshed": "–°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω",
        "selected": "–í—ã–±—Ä–∞–Ω–æ: {}",
        "window_not_found": "–û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
        "transparency_set": "–ü—Ä–æ–∑—Ä–∞—á kapalƒ±: {}",
        "blur_enabled": "–ë–ª—é—Ä –≤–∫–ª—é—á—ë–Ω",
        "blur_disabled": "–ë–ª—é—Ä –≤—ã–∫–ª—é—á–µ–Ω",
        "blur_type_set": "–¢–∏–ø –±–ª—é—Ä–∞: {}",
        "blur_opacity_set": "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –±–ª—é—Ä–∞: {}",
        "blur_intensity_set": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –±–ª—é—Ä–∞: {}",
        "tint_opacity_set": "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ—Ç—Ç–µ–Ω–∫–∞: {}",
        "changes_undone": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã",
        "nothing_to_undo": "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
        "reset_complete": "–û–∫–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        "profile_saved": "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        "profile_loaded": "–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω",
        "profile_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è",
        "language": "–Ø–∑—ã–∫",
        "error": "–û—à–∏–±–∫–∞",
        "window_incompatible": "–≠—Ç–æ –æ–∫–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –±–ª—é—Ä–∞",
        "tooltip_refresh": "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω",
        "tooltip_auto_refresh": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω",
        "tooltip_transparency": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ (50-255)",
        "tooltip_enable_blur": "–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –±–ª—é—Ä–∞",
        "tooltip_blur_type": "–í—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏–ª–∏ –∞–∫—Ä–∏–ª–æ–≤—ã–º –±–ª—é—Ä–æ–º",
        "tooltip_blur_opacity": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –±–ª—é—Ä–∞ (0-255)",
        "tooltip_blur_intensity": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –±–ª—é—Ä–∞ (0-100)",
        "tooltip_tint_opacity": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ—Ç—Ç–µ–Ω–∫–∞ —Ñ–æ–Ω–∞ (0-255)",
        "tooltip_undo": "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
        "tooltip_reset": "–°–±—Ä–æ—Å–∏—Ç—å –æ–∫–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        "tooltip_save_profile": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å",
        "tooltip_load_profile": "–°–∫–∞—á–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
        "tooltip_language": "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "tooltip_about": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
    },
    "uk": {
        "title": "–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –±–ª—é—Ä",
        "windows": "–í—ñ–∫–Ω–∞",
        "refresh": "üîÑ –û–Ω–æ–≤–∏—Ç–∏",
        "auto_refresh": "–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
        "transparency": "–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å",
        "blur_effect": "–ï—Ñ–µ–∫—Ç –±–ª—é—Ä—É",
        "enable_blur": "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –±–ª—é—Ä",
        "blur_type": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±–ª—é—Ä", "–ê–∫—Ä–∏–ª–æ–≤–∏–π –±–ª—é—Ä"],
        "blur_opacity": "–ù–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –±–ª—é—Ä—É",
        "blur_intensity": "–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –±–ª—é—Ä—É",
        "tint_opacity": "–ù–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –≤—ñ–¥—Ç—ñ–Ω–∫—É",
        "undo": "‚ü≤ –°–∫–∞—Å—É–≤–∞—Ç–∏",
        "reset": "üîÑ –°–∫–∏–Ω—É—Ç–∏",
        "about": "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É",
        "save_profile": "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
        "load_profile": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
        "ready": "–ì–æ—Ç–æ–≤–æ",
        "window_list_refreshed": "–°–ø–∏—Å–æ–∫ –≤—ñ–∫–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ",
        "selected": "–í–∏–±—Ä–∞–Ω–æ: {}",
        "window_not_found": "–í—ñ–∫–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        "transparency_set": "–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å: {}",
        "blur_enabled": "–ë–ª—é—Ä —É–≤—ñ–º–∫–Ω–µ–Ω–æ",
        "blur_disabled": "–ë–ª—é—Ä –≤–∏–º–∫–Ω–µ–Ω–æ",
        "blur_type_set": "–¢–∏–ø –±–ª—é—Ä—É: {}",
        "blur_opacity_set": "–ù–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –±–ª—é—Ä—É: {}",
        "blur_intensity_set": "–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –±–ª—é—Ä—É: {}",
        "tint_opacity_set": "–ù–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –≤—ñ–¥—Ç—ñ–Ω–∫—É: {}",
        "changes_undone": "–ó–º—ñ–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        "nothing_to_undo": "–ù–µ–º–∞—î —â–æ —Å–∫–∞—Å–æ–≤—É–≤–∞—Ç–∏",
        "reset_complete": "–í—ñ–∫–Ω–æ —Å–∫–∏–Ω—É—Ç–æ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É",
        "profile_saved": "–ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
        "profile_loaded": "–ü—Ä–æ—Ñ—ñ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ",
        "profile_error": "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é",
        "language": "–ú–æ–≤–∞",
        "error": "–ü–æ–º–∏–ª–∫–∞",
        "window_incompatible": "–¶–µ –≤—ñ–∫–Ω–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –µ—Ñ–µ–∫—Ç–∏ –±–ª—é—Ä—É",
        "tooltip_refresh": "–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤—ñ–∫–æ–Ω",
        "tooltip_auto_refresh": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–∫–æ–Ω",
        "tooltip_transparency": "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –≤—ñ–∫–Ω–∞ (50-255)",
        "tooltip_enable_blur": "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–±–æ –≤–∏–º–∫–Ω—É—Ç–∏ –µ—Ñ–µ–∫—Ç –±–ª—é—Ä—É",
        "tooltip_blur_type": "–í–∏–±—Ä–∞—Ç–∏ –º—ñ–∂ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –∞–±–æ –∞–∫—Ä–∏–ª–æ–≤–∏–º –±–ª—é—Ä–æ–º",
        "tooltip_blur_opacity": "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –±–ª—é—Ä—É (0-255)",
        "tooltip_blur_intensity": "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –±–ª—é—Ä—É (0-100)",
        "tooltip_tint_opacity": "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –≤—ñ–¥—Ç—ñ–Ω–∫—É —Ñ–æ–Ω—É (0-255)",
        "tooltip_undo": "–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∑–º—ñ–Ω—É",
        "tooltip_reset": "–°–∫–∏–Ω—É—Ç–∏ –≤—ñ–∫–Ω–æ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É",
        "tooltip_save_profile": "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —è–∫ –ø—Ä–æ—Ñ—ñ–ª—å",
        "tooltip_load_profile": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å",
        "tooltip_language": "–í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º–∏",
        "tooltip_about": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"
    },
    "be": {
        "title": "–ù–∞–ª–∞–¥–∂–≤–∞–ª—å–Ω—ã –±–ª—é—Ä",
        "windows": "–í–æ–∫–Ω—ã",
        "refresh": "üîÑ –ê–±–Ω–∞–≤—ñ—Ü—å",
        "auto_refresh": "–ê—û—Ç–∞–∞–±–Ω–∞—û–ª–µ–Ω–Ω–µ",
        "transparency": "–ü—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å",
        "blur_effect": "–≠—Ñ–µ–∫—Ç –±–ª—é—Ä—É",
        "enable_blur": "–£–∫–ª—é—á—ã—Ü—å –±–ª—é—Ä",
        "blur_type": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã –±–ª—é—Ä", "–ê–∫—Ä—ã–ª–∞–≤—ã –±–ª—é—Ä"],
        "blur_opacity": "–ù–µ–ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –±–ª—é—Ä—É",
        "blur_intensity": "–Ü–Ω—Ç—ç–Ω—Å—ñ—û–Ω–∞—Å—Ü—å –±–ª—é—Ä—É",
        "tint_opacity": "–ù–µ–ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –∞–¥—Ü–µ–Ω–Ω—è",
        "undo": "‚ü≤ –ê–¥–º—è–Ω—ñ—Ü—å",
        "reset": "üîÑ –°–∫—ñ–Ω—É—Ü—å",
        "about": "–ü—Ä–∞ –ø—Ä–∞–≥—Ä–∞–º—É",
        "save_profile": "–ó–∞—Ö–∞–≤–∞—Ü—å –ø—Ä–æ—Ñ—ñ–ª—å",
        "load_profile": "–ó–∞–≥—Ä—É–∑—ñ—Ü—å –ø—Ä–æ—Ñ—ñ–ª—å",
        "ready": "–ì–∞—Ç–æ–≤–∞",
        "window_list_refreshed": "–°–ø—ñ—Å –≤–æ–∫–Ω–∞—û –∞–±–Ω–æ—û–ª–µ–Ω—ã",
        "selected": "–ê–±—Ä–∞–Ω–∞: {}",
        "window_not_found": "–í–æ–∫–Ω–∞ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω–∞!",
        "transparency_set": "–ü—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å: {}",
        "blur_enabled": "–ë–ª—é—Ä —É–∫–ª—é—á–∞–Ω—ã",
        "blur_disabled": "–ë–ª—é—Ä –≤—ã–∫–ª—é—á–∞–Ω—ã",
        "blur_type_set": "–¢—ã–ø –±–ª—é—Ä—É: {}",
        "blur_opacity_set": "–ù–µ–ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –±–ª—é—Ä—É: {}",
        "blur_intensity_set": "–Ü–Ω—Ç—ç–Ω—Å—ñ—û–Ω–∞—Å—Ü—å –±–ª—é—Ä—É: {}",
        "tint_opacity_set": "–ù–µ–ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –∞–¥—Ü–µ–Ω–Ω—è: {}",
        "changes_undone": "–ó–º–µ–Ω—ã –∞–¥–º–µ–Ω–µ–Ω—ã",
        "nothing_to_undo": "–ù—è–º–∞ —á–∞–≥–æ –∞–¥–º—è–Ω—è—Ü—å",
        "reset_complete": "–í–æ–∫–Ω–∞ —Å–∫—ñ–Ω—É—Ç–∞ –¥–∞ –ø–∞—á–∞—Ç–∫–æ–≤–∞–≥–∞ —Å—Ç–∞–Ω—É",
        "profile_saved": "–ü—Ä–æ—Ñ—ñ–ª—å –∑–∞—Ö–∞–≤–∞–Ω—ã",
        "profile_loaded": "–ü—Ä–æ—Ñ—ñ–ª—å –∑–∞–≥—Ä—É–∂–∞–Ω—ã",
        "profile_error": "–ü–∞–º—ã–ª–∫–∞ –∞–ø—Ä–∞—Ü–æ—û–∫—ñ –ø—Ä–æ—Ñ—ñ–ª—é",
        "language": "–ú–æ–≤–∞",
        "error": "–ü–∞–º—ã–ª–∫–∞",
        "window_incompatible": "–ì—ç—Ç–∞ –≤–æ–∫–Ω–∞ –Ω–µ –ø–∞–¥—Ç—Ä—ã–º–ª—ñ–≤–∞–µ —ç—Ñ–µ–∫—Ç—ã –±–ª—é—Ä—É",
        "tooltip_refresh": "–ê–±–Ω–∞–≤—ñ—Ü—å —Å–ø—ñ—Å –∞–∫—Ç—ã—û–Ω—ã—Ö –≤–æ–∫–Ω–∞—û",
        "tooltip_auto_refresh": "–ê—û—Ç–∞–º–∞—Ç—ã—á–Ω–∞ –∞–±–Ω–∞—û–ª—è—Ü—å —Å–ø—ñ—Å –≤–æ–∫–Ω–∞—û",
        "tooltip_transparency": "–ù–∞–ª–∞–¥–∑—ñ—Ü—å –ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –≤–æ–∫–Ω–∞—û (50-255)",
        "tooltip_enable_blur": "–£–∫–ª—é—á—ã—Ü—å –∞–±–æ –≤—ã–∫–ª—é—á—ã—Ü—å —ç—Ñ–µ–∫—Ç –±–ª—é—Ä—É",
        "tooltip_blur_type": "–í—ã–±—Ä–∞—Ü—å –ø–∞–º—ñ–∂ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —ñ –∞–∫—Ä—ã–ª–∞–≤—ã–º –±–ª—é—Ä–∞–º",
        "tooltip_blur_opacity": "–ù–∞–ª–∞–¥–∑—ñ—Ü—å –Ω–µ–ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –±–ª—é—Ä—É (0-255)",
        "tooltip_blur_intensity": "–ù–∞–ª–∞–¥–∑—ñ—Ü—å —ñ–Ω—Ç—ç–Ω—Å—ñ—û–Ω–∞—Å—Ü—å –±–ª—é—Ä—É (0-100)",
        "tooltip_tint_opacity": "–ù–∞–ª–∞–¥–∑—ñ—Ü—å –Ω–µ–ø—Ä–∞–∑—Ä—ã—Å—Ç–∞—Å—Ü—å –∞–¥—Ü–µ–Ω–Ω—è —Ñ–æ–Ω—É (0-255)",
        "tooltip_undo": "–ê–¥–º—è–Ω—ñ—Ü—å –∞–ø–æ—à–Ω—é—é –∑–º–µ–Ω—É",
        "tooltip_reset": "–°–∫—ñ–Ω—É—Ü—å –≤–æ–∫–Ω–∞ –¥–∞ –ø–∞—á–∞—Ç–∫–æ–≤–∞–≥–∞ —Å—Ç–∞–Ω—É",
        "tooltip_save_profile": "–ó–∞—Ö–∞–≤–∞—Ü—å –±—è–≥—É—á—ã—è –Ω–∞–ª–∞–¥—ã —è–∫ –ø—Ä–æ—Ñ—ñ–ª—å",
        "tooltip_load_profile": "–ó–∞–≥—Ä—É–∑—ñ—Ü—å –∑–∞—Ö–∞–≤–∞–Ω—ã –ø—Ä–æ—Ñ—ñ–ª—å",
        "tooltip_language": "–í—ã–±—Ä–∞—Ü—å –º–æ–≤—É –ø—Ä—ã–∫–ª–∞–¥–∞–Ω–Ω—è",
        "tooltip_about": "–ü—Ä–∞–≥–ª—è–¥–∑–µ—Ü—å —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—é –ø—Ä–∞ –ø—Ä–∞–≥—Ä–∞–º—É"
    },
    "de": {
        "title": "Benutzerdefinierte Unsch√§rfe",
        "windows": "Fenster",
        "refresh": "üîÑ Aktualisieren",
        "auto_refresh": "Automatische Aktualisierung",
        "transparency": "Transparenz",
        "blur_effect": "Unsch√§rfeeffekt",
        "enable_blur": "Unsch√§rfe aktivieren",
        "blur_type": ["Standardunsch√§rfe", "Acrylunsch√§rfe"],
        "blur_opacity": "Unsch√§rfeopazit√§t",
        "blur_intensity": "Unsch√§rfeintensit√§t",
        "tint_opacity": "T√∂nungsopazit√§t",
        "undo": "‚ü≤ R√ºckg√§ngig",
        "reset": "üîÑ Zur√ºcksetzen",
        "about": "√úber",
        "save_profile": "Profil speichern",
        "load_profile": "Profil laden",
        "ready": "Bereit",
        "window_list_refreshed": "Fensterliste aktualisiert",
        "selected": "Ausgew√§hlt: {}",
        "window_not_found": "Fenster nicht gefunden!",
        "transparency_set": "Transparenz: {}",
        "blur_enabled": "Unsch√§rfe aktiviert",
        "blur_disabled": "Unsch√§rfe deaktiviert",
        "blur_type_set": "Unsch√§rfetyp: {}",
        "blur_opacity_set": "Unsch√§rfeopazit√§t: {}",
        "blur_intensity_set": "Unsch√§rfeintensit√§t: {}",
        "tint_opacity_set": "T√∂nungsopazit√§t: {}",
        "changes_undone": "√Ñnderungen r√ºckg√§ngig gemacht",
        "nothing_to_undo": "Nichts r√ºckg√§ngig zu machen",
        "reset_complete": "Fenster auf urspr√ºnglichen Zustand zur√ºckgesetzt",
        "profile_saved": "Profil gespeichert",
        "profile_loaded": "Profil geladen",
        "profile_error": "Fehler beim Verarbeiten des Profils",
        "language": "Sprache",
        "error": "Fehler",
        "window_incompatible": "Dieses Fenster unterst√ºtzt keine Unsch√§rfeeffekte",
        "tooltip_refresh": "Liste der aktiven Fenster aktualisieren",
        "tooltip_auto_refresh": "Fensterliste automatisch aktualisieren",
        "tooltip_transparency": "Fenstertransparenz anpassen (50-255)",
        "tooltip_enable_blur": "Unsch√§rfeeffekt aktivieren oder deaktivieren",
        "tooltip_blur_type": "Zwischen Standard- und Acrylunsch√§rfe w√§hlen",
        "tooltip_blur_opacity": "Unsch√§rfeopazit√§t anpassen (0-255)",
        "tooltip_blur_intensity": "Unsch√§rfeintensit√§t anpassen (0-100)",
        "tooltip_tint_opacity": "T√∂nungsopazit√§t des Hintergrunds anpassen (0-255)",
        "tooltip_undo": "Letzte √Ñnderung r√ºckg√§ngig machen",
        "tooltip_reset": "Fenster auf urspr√ºnglichen Zustand zur√ºcksetzen",
        "tooltip_save_profile": "Aktuelle Einstellungen als Profil speichern",
        "tooltip_load_profile": "Gespeichertes Profil laden",
        "tooltip_language": "Anwendungssprache w√§hlen",
        "tooltip_about": "Informationen √ºber das Programm anzeigen"
    },
    "es": {
        "title": "Desenfoque Personalizado",
        "windows": "Ventanas",
        "refresh": "üîÑ Actualizar",
        "auto_refresh": "Actualizaci√≥n autom√°tica",
        "transparency": "Transparencia",
        "blur_effect": "Efecto de Desenfoque",
        "enable_blur": "Activar Desenfoque",
        "blur_type": ["Desenfoque Est√°ndar", "Desenfoque Acr√≠lico"],
        "blur_opacity": "Opacidad de Desenfoque",
        "blur_intensity": "Intensidad de Desenfoque",
        "tint_opacity": "Opacidad de Tinte",
        "undo": "‚ü≤ Deshacer",
        "reset": "üîÑ Restablecer",
        "about": "Acerca de",
        "save_profile": "Guardar Perfil",
        "load_profile": "Cargar Perfil",
        "ready": "Listo",
        "window_list_refreshed": "Lista de ventanas actualizada",
        "selected": "Seleccionado: {}",
        "window_not_found": "¬°Ventana no encontrada!",
        "transparency_set": "Transparencia: {}",
        "blur_enabled": "Desenfoque activado",
        "blur_disabled": "Desenfoque desactivado",
        "blur_type_set": "Tipo de desenfoque: {}",
        "blur_opacity_set": "Opacidad de desenfoque: {}",
        "blur_intensity_set": "Intensidad de desenfoque: {}",
        "tint_opacity_set": "Opacidad de tinte: {}",
        "changes_undone": "Cambios deshechos",
        "nothing_to_undo": "Nada que deshacer",
        "reset_complete": "Ventana restablecida a su estado original",
        "profile_saved": "Perfil guardado",
        "profile_loaded": "Perfil cargado",
        "profile_error": "Error al procesar el perfil",
        "language": "Idioma",
        "error": "Error",
        "window_incompatible": "Esta ventana no admite efectos de desenfoque",
        "tooltip_refresh": "Actualizar la lista de ventanas activas",
        "tooltip_auto_refresh": "Actualizar autom√°ticamente la lista de ventanas",
        "tooltip_transparency": "Ajustar la transparencia de la ventana (50-255)",
        "tooltip_enable_blur": "Activar o desactivar el efecto de desenfoque",
        "tooltip_blur_type": "Elegir entre desenfoque est√°ndar o acr√≠lico",
        "tooltip_blur_opacity": "Ajustar la opacidad del desenfoque (0-255)",
        "tooltip_blur_intensity": "Ajustar la intensidad del desenfoque (0-100)",
        "tooltip_tint_opacity": "Ajustar la opacidad del tinte de fondo (0-255)",
        "tooltip_undo": "Deshacer el √∫ltimo cambio",
        "tooltip_reset": "Restablecer la ventana a su estado original",
        "tooltip_save_profile": "Guardar la configuraci√≥n actual como perfil",
        "tooltip_load_profile": "Cargar un perfil guardado",
        "tooltip_language": "Seleccionar el idioma de la aplicaci√≥n",
        "tooltip_about": "Ver informaci√≥n sobre el programa"
    },
    "fr": {
        "title": "Flou Personnalis√©",
        "windows": "Fen√™tres",
        "refresh": "üîÑ Actualiser",
        "auto_refresh": "Actualisation automatique",
        "transparency": "Transparence",
        "blur_effect": "Effet de Flou",
        "enable_blur": "Activer le Flou",
        "blur_type": ["Flou Standard", "Flou Acrylique"],
        "blur_opacity": "Opacit√© du Flou",
        "blur_intensity": "Intensit√© du Flou",
        "tint_opacity": "Opacit√© de la Teinte",
        "undo": "‚ü≤ Annuler",
        "reset": "üîÑ R√©initialiser",
        "about": "√Ä propos",
        "save_profile": "Enregistrer le Profil",
        "load_profile": "Charger le Profil",
        "ready": "Pr√™t",
        "window_list_refreshed": "Liste des fen√™tres actualis√©e",
        "selected": "S√©lectionn√© : {}",
        "window_not_found": "Fen√™tre non trouv√©e !",
        "transparency_set": "Transparence : {}",
        "blur_enabled": "Flou activ√©",
        "blur_disabled": "Flou d√©sactiv√©",
        "blur_type_set": "Type de flou : {}",
        "blur_opacity_set": "Opacit√© du flou : {}",
        "blur_intensity_set": "Intensit√© du flou : {}",
        "tint_opacity_set": "Opacit√© de la teinte : {}",
        "changes_undone": "Modifications annul√©es",
        "nothing_to_undo": "Rien √† annuler",
        "reset_complete": "Fen√™tre r√©initialis√©e √† son √©tat initial",
        "profile_saved": "Profil enregistr√©",
        "profile_loaded": "Profil charg√©",
        "profile_error": "Erreur lors du traitement du profil",
        "language": "Langue",
        "error": "Erreur",
        "window_incompatible": "Cette fen√™tre ne prend pas en charge les effets de flou",
        "tooltip_refresh": "Actualiser la liste des fen√™tres actives",
        "tooltip_auto_refresh": "Actualiser automatiquement la liste des fen√™tres",
        "tooltip_transparency": "Ajuster la transparence de la fen√™tre (50-255)",
        "tooltip_enable_blur": "Activer ou d√©sactiver l'effet de flou",
        "tooltip_blur_type": "Choisir entre un flou standard ou acrylique",
        "tooltip_blur_opacity": "Ajuster l'opacit√© du flou (0-255)",
        "tooltip_blur_intensity": "Ajuster l'intensit√© du flou (0-100)",
        "tooltip_tint_opacity": "Ajuster l'opacit√© de la teinte de fond (0-255)",
        "tooltip_undo": "Annuler la derni√®re modification",
        "tooltip_reset": "R√©initialiser la fen√™tre √† son √©tat initial",
        "tooltip_save_profile": "Enregistrer les param√®tres actuels comme profil",
        "tooltip_load_profile": "Charger un profil enregistr√©",
        "tooltip_language": "S√©lectionner la langue de l'application",
        "tooltip_about": "Voir les informations sur le programme"
    }
}

def make_window_transparent(hwnd, alpha=255):
    try:
        styles = GetWindowLong(hwnd, GWL_EXSTYLE)
        if not styles:
            return False
        SetWindowLong(hwnd, GWL_EXSTYLE, styles | WS_EX_LAYERED)
        SetLayeredWindowAttributes(hwnd, 0, alpha, LWA_ALPHA)
        return True
    except Exception as e:
        logging.error(f"Error setting transparency: {e}")
        return False

def enable_blur(hwnd, blur_type=ACCENT_ENABLE_BLURBEHIND, opacity=0, intensity=0):
    try:
        gradient_color = (opacity << 24) | 0x000000
        accent = ACCENT_POLICY()
        accent.AccentState = blur_type
        accent.AccentFlags = 0
        accent.GradientColor = gradient_color
        accent.AnimationId = 0

        data = WINDOWCOMPOSITIONATTRIBDATA()
        data.Attribute = WCA_ACCENT_POLICY
        data.Data = ctypes.addressof(accent)
        data.SizeOfData = ctypes.sizeof(accent)

        result = SetWindowCompositionAttribute(hwnd, ctypes.byref(data))
        if not result:
            return False
        return True
    except Exception as e:
        logging.error(f"Error enabling blur: {e}")
        return False

def disable_blur(hwnd, original_styles, original_alpha):
    try:
        accent = ACCENT_POLICY()
        accent.AccentState = 0
        accent.AccentFlags = 0
        accent.GradientColor = 0
        accent.AnimationId = 0

        data = WINDOWCOMPOSITIONATTRIBDATA()
        data.Attribute = WCA_ACCENT_POLICY
        data.Data = ctypes.addressof(accent)
        data.SizeOfData = ctypes.sizeof(accent)

        SetWindowCompositionAttribute(hwnd, ctypes.byref(data))
        SetWindowLong(hwnd, GWL_EXSTYLE, original_styles)
        if original_styles & WS_EX_LAYERED:
            SetLayeredWindowAttributes(hwnd, 0, original_alpha, LWA_ALPHA)
        else:
            SetLayeredWindowAttributes(hwnd, 0, 255, LWA_ALPHA)
        return True
    except Exception as e:
        logging.error(f"Error disabling blur: {e}")
        return False

def is_dwm_composition_enabled():
    try:
        enabled = ctypes.c_bool()
        dwmapi.DwmIsCompositionEnabled(ctypes.byref(enabled))
        return enabled.value
    except Exception as e:
        logging.error(f"Error checking DWM composition: {e}")
        return False

class Tooltip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tip_window = None
        self.id = None
        self.x = self.y = 0
        self.widget.bind("<Enter>", self.show_tip)
        self.widget.bind("<Leave>", self.hide_tip)

    def show_tip(self, event):
        self.x = event.x_root + 10
        self.y = event.y_root + 10
        self.tip_window = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{self.x}+{self.y}")
        label = tk.Label(tw, text=self.text, justify=tk.LEFT, bg="#333333", fg="white", relief=tk.SOLID, borderwidth=1, font=("Roboto", 10))
        label.pack()

    def hide_tip(self, event):
        if self.tip_window:
            self.tip_window.destroy()
        self.tip_window = None

class CustomBlurApp:
    def __init__(self, root):
        self.root = root
        self.language = self.load_language()
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")
        root.title(LOCALIZATION[self.language]["title"])
        root.geometry("800x600")
        root.resizable(False, False)

        self.selected_hwnd = None
        self.history = {}
        self.original_states = {}
        self.max_history = 20
        self.window_list = []
        self.profiles = self.load_profiles()

        self.main_frame = ctk.CTkFrame(root, corner_radius=0, fg_color="#1a1a1a")
        self.main_frame.pack(fill="both", expand=True)

        self.top_bar = ctk.CTkFrame(self.main_frame, corner_radius=0, fg_color="#2b2b2b")
        self.top_bar.pack(side="top", fill="x")

        self.about_button = ctk.CTkButton(self.top_bar, text=LOCALIZATION[self.language]["about"], command=self.show_about, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        self.about_button.pack(side="left", padx=10, pady=5)
        Tooltip(self.about_button, LOCALIZATION[self.language]["tooltip_about"])

        self.sidebar = ctk.CTkFrame(self.main_frame, width=300, corner_radius=0, fg_color="#2b2b2b")
        self.sidebar.pack(side="left", fill="y", padx=(0, 1))

        self.title_label = ctk.CTkLabel(self.sidebar, text=LOCALIZATION[self.language]["title"], font=("Roboto", 18, "bold"), text_color="#ffffff")
        self.title_label.pack(pady=20)

        self.language_label = ctk.CTkLabel(self.sidebar, text=LOCALIZATION[self.language]["language"], font=("Roboto", 12), text_color="#cccccc")
        self.language_label.pack(pady=10, padx=10, anchor="w")
        self.language_menu = ctk.CTkOptionMenu(
            self.sidebar,
            values=["English", "–†—É—Å—Å–∫–∏–π", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è", "Deutsch", "Espa√±ol", "Fran√ßais"],
            command=self.change_language,
            fg_color="#3a3a3a",
            button_color="#4a4a4a",
            button_hover_color="#5a5a5a"
        )
        self.language_menu.set({
            "en": "English",
            "ru": "–†—É—Å—Å–∫–∏–π",
            "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            "be": "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è",
            "de": "Deutsch",
            "es": "Espa√±ol",
            "fr": "Fran√ßais"
        }[self.language])
        self.language_menu.pack(pady=5, padx=10)
        Tooltip(self.language_menu, LOCALIZATION[self.language]["tooltip_language"])

        self.window_label = ctk.CTkLabel(self.sidebar, text=LOCALIZATION[self.language]["windows"], font=("Roboto", 12), text_color="#cccccc")
        self.window_label.pack(pady=10, padx=10, anchor="w")

        self.window_frame = ctk.CTkScrollableFrame(self.sidebar, height=300, width=280, fg_color="#333333")
        self.window_frame.pack(padx=10, pady=5)

        self.window_listbox = tk.Listbox(
            self.window_frame,
            height=15,
            width=40,
            font=("Roboto", 12),
            bg="#333333",
            fg="white",
            selectbackground="#1f6aa5",
            selectforeground="white",
            highlightthickness=0,
            borderwidth=0
        )
        self.window_listbox.pack(fill="both", expand=True)
        self.window_listbox.bind("<<ListboxSelect>>", self.select_window)

        self.refresh_button = ctk.CTkButton(self.sidebar, text=LOCALIZATION[self.language]["refresh"], command=self.refresh_list, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        self.refresh_button.pack(pady=10)
        Tooltip(self.refresh_button, LOCALIZATION[self.language]["tooltip_refresh"])

        self.auto_refresh_toggle = ctk.CTkSwitch(self.sidebar, text=LOCALIZATION[self.language]["auto_refresh"], command=self.toggle_auto_refresh, fg_color="#3a3a3a", progress_color="#1f6aa5")
        self.auto_refresh_toggle.pack(pady=5)
        Tooltip(self.auto_refresh_toggle, LOCALIZATION[self.language]["tooltip_auto_refresh"])
        self.auto_refresh_interval = 5000
        self.auto_refresh_id = None

        self.controls_frame = ctk.CTkFrame(self.main_frame, corner_radius=15, fg_color="#2b2b2b")
        self.controls_frame.pack(side="right", fill="both", expand=True, padx=20, pady=20)

        self.trans_label = ctk.CTkLabel(self.controls_frame, text=LOCALIZATION[self.language]["transparency"], font=("Roboto", 14), text_color="#cccccc")
        self.trans_label.pack(pady=10)
        self.transparency_scale = ctk.CTkSlider(self.controls_frame, from_=50, to=255, command=self.update_transparency, button_color="#1f6aa5", progress_color="#1f6aa5")
        self.transparency_scale.set(255)
        self.transparency_scale.pack(pady=5, padx=20)
        Tooltip(self.transparency_scale, LOCALIZATION[self.language]["tooltip_transparency"])

        self.blur_label = ctk.CTkLabel(self.controls_frame, text=LOCALIZATION[self.language]["blur_effect"], font=("Roboto", 14), text_color="#cccccc")
        self.blur_label.pack(pady=10)
        self.blur_toggle = ctk.CTkSwitch(self.controls_frame, text=LOCALIZATION[self.language]["enable_blur"], command=self.toggle_blur, fg_color="#3a3a3a", progress_color="#1f6aa5")
        self.blur_toggle.pack(pady=5)
        Tooltip(self.blur_toggle, LOCALIZATION[self.language]["tooltip_enable_blur"])

        self.blur_type = ctk.CTkOptionMenu(self.controls_frame, values=LOCALIZATION[self.language]["blur_type"], command=self.update_blur_type, fg_color="#3a3a3a", button_color="#4a4a4a", button_hover_color="#5a5a5a")
        self.blur_type.pack(pady=5)
        Tooltip(self.blur_type, LOCALIZATION[self.language]["tooltip_blur_type"])

        self.blur_opacity_label = ctk.CTkLabel(self.controls_frame, text=LOCALIZATION[self.language]["blur_opacity"], font=("Roboto", 12), text_color="#cccccc")
        self.blur_opacity_label.pack(pady=5)
        self.blur_opacity_scale = ctk.CTkSlider(self.controls_frame, from_=0, to=255, command=self.update_blur_opacity, button_color="#1f6aa5", progress_color="#1f6aa5")
        self.blur_opacity_scale.set(0)
        self.blur_opacity_scale.pack(pady=5, padx=20)
        Tooltip(self.blur_opacity_scale, LOCALIZATION[self.language]["tooltip_blur_opacity"])

        self.blur_intensity_label = ctk.CTkLabel(self.controls_frame, text=LOCALIZATION[self.language]["blur_intensity"], font=("Roboto", 12), text_color="#cccccc")
        self.blur_intensity_label.pack(pady=5)
        self.blur_intensity_scale = ctk.CTkSlider(self.controls_frame, from_=0, to=100, command=self.update_blur_intensity, button_color="#1f6aa5", progress_color="#1f6aa5")
        self.blur_intensity_scale.set(0)
        self.blur_intensity_scale.pack(pady=5, padx=20)
        Tooltip(self.blur_intensity_scale, LOCALIZATION[self.language]["tooltip_blur_intensity"])

        self.tint_opacity_label = ctk.CTkLabel(self.controls_frame, text=LOCALIZATION[self.language]["tint_opacity"], font=("Roboto", 12), text_color="#cccccc")
        self.tint_opacity_label.pack(pady=5)
        self.tint_opacity_scale = ctk.CTkSlider(self.controls_frame, from_=0, to=255, command=self.update_tint_opacity, button_color="#1f6aa5", progress_color="#1f6aa5")
        self.tint_opacity_scale.set(0)
        self.tint_opacity_scale.pack(pady=5, padx=20)
        Tooltip(self.tint_opacity_scale, LOCALIZATION[self.language]["tooltip_tint_opacity"])

        self.profile_frame = ctk.CTkFrame(self.controls_frame, corner_radius=10, fg_color="#333333")
        self.profile_frame.pack(pady=10, padx=10, fill="x")
        self.save_profile_button = ctk.CTkButton(self.profile_frame, text=LOCALIZATION[self.language]["save_profile"], command=self.save_profile, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        self.save_profile_button.pack(side="left", padx=5)
        Tooltip(self.save_profile_button, LOCALIZATION[self.language]["tooltip_save_profile"])
        self.load_profile_button = ctk.CTkButton(self.profile_frame, text=LOCALIZATION[self.language]["load_profile"], command=self.load_profile, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        self.load_profile_button.pack(side="left", padx=5)
        Tooltip(self.load_profile_button, LOCALIZATION[self.language]["tooltip_load_profile"])

        self.action_frame = ctk.CTkFrame(self.controls_frame, corner_radius=10, fg_color="#333333")
        self.action_frame.pack(pady=10, padx=10, fill="x")
        self.undo_button = ctk.CTkButton(self.action_frame, text=LOCALIZATION[self.language]["undo"], command=self.undo, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        self.undo_button.pack(side="left", padx=5)
        Tooltip(self.undo_button, LOCALIZATION[self.language]["tooltip_undo"])
        self.reset_button = ctk.CTkButton(self.action_frame, text=LOCALIZATION[self.language]["reset"], command=self.reset_window, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        self.reset_button.pack(side="left", padx=5)
        Tooltip(self.reset_button, LOCALIZATION[self.language]["tooltip_reset"])

        self.status = ctk.CTkLabel(self.controls_frame, text=LOCALIZATION[self.language]["ready"], font=("Roboto", 12), text_color="#cccccc")
        self.status.pack(pady=10)

        self.refresh_list()
        if self.auto_refresh_toggle.get():
            self.start_auto_refresh()

    def load_language(self):
        config_file = "blur_config.json"
        default_language = "en"
        try:
            if os.path.exists(config_file):
                with open(config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)
                    return config.get("language", default_language)
        except Exception as e:
            logging.error(f"Error loading language: {e}")
        return default_language

    def save_language(self):
        config_file = "blur_config.json"
        try:
            config = {"language": self.language}
            with open(config_file, "w", encoding="utf-8") as f:
                json.dump(config, f)
        except Exception as e:
            logging.error(f"Error saving language: {e}")

    def load_profiles(self):
        profiles_file = "blur_profiles.json"
        try:
            if os.path.exists(profiles_file):
                with open(profiles_file, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            logging.error(f"Error loading profiles: {e}")
        return {}

    def save_profiles(self):
        profiles_file = "blur_profiles.json"
        try:
            with open(profiles_file, "w", encoding="utf-8") as f:
                json.dump(self.profiles, f)
        except Exception as e:
            logging.error(f"Error saving profiles: {e}")

    def change_language(self, language_name):
        language_map = {
            "English": "en",
            "–†—É—Å—Å–∫–∏–π": "ru",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk",
            "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è": "be",
            "Deutsch": "de",
            "Espa√±ol": "es",
            "Fran√ßais": "fr"
        }
        self.language = language_map[language_name]
        self.save_language()
        self.update_ui_texts()

    def show_about(self):
        about_dialog = ctk.CTkToplevel(self.root)
        about_dialog.title(LOCALIZATION[self.language]["about"])
        about_dialog.geometry("400x250")
        about_dialog.resizable(False, False)

        title = ctk.CTkLabel(about_dialog, text="Custom Blur", font=("Roboto", 16, "bold"), text_color="#ffffff")
        title.pack(pady=20)

        version = ctk.CTkLabel(about_dialog, text="Version: 0.0.1", font=("Roboto", 12), text_color="#cccccc")
        version.pack(pady=5)

        developer = ctk.CTkLabel(about_dialog, text="Developer: Scody", font=("Roboto", 12), text_color="#cccccc")
        developer.pack(pady=5)

        github = ctk.CTkLabel(about_dialog, text="GitHub: https://github.com/Scody0", font=("Roboto", 12), text_color="#1f6aa5")
        github.pack(pady=5)

        close_button = ctk.CTkButton(about_dialog, text="Close", command=about_dialog.destroy, width=100, fg_color="#3a3a3a", hover_color="#4a4a4a")
        close_button.pack(pady=20)

    def update_ui_texts(self):
        try:
            self.root.title(LOCALIZATION[self.language]["title"])
            self.title_label.configure(text=LOCALIZATION[self.language]["title"])
            self.language_label.configure(text=LOCALIZATION[self.language]["language"])
            self.window_label.configure(text=LOCALIZATION[self.language]["windows"])
            self.refresh_button.configure(text=LOCALIZATION[self.language]["refresh"])
            self.auto_refresh_toggle.configure(text=LOCALIZATION[self.language]["auto_refresh"])
            self.trans_label.configure(text=LOCALIZATION[self.language]["transparency"])
            self.blur_label.configure(text=LOCALIZATION[self.language]["blur_effect"])
            self.blur_toggle.configure(text=LOCALIZATION[self.language]["enable_blur"])
            self.blur_type.configure(values=LOCALIZATION[self.language]["blur_type"])
            self.blur_type.set(LOCALIZATION[self.language]["blur_type"][0])
            self.blur_opacity_label.configure(text=LOCALIZATION[self.language]["blur_opacity"])
            self.blur_intensity_label.configure(text=LOCALIZATION[self.language]["blur_intensity"])
            self.tint_opacity_label.configure(text=LOCALIZATION[self.language]["tint_opacity"])
            self.save_profile_button.configure(text=LOCALIZATION[self.language]["save_profile"])
            self.load_profile_button.configure(text=LOCALIZATION[self.language]["load_profile"])
            self.undo_button.configure(text=LOCALIZATION[self.language]["undo"])
            self.reset_button.configure(text=LOCALIZATION[self.language]["reset"])
            self.about_button.configure(text=LOCALIZATION[self.language]["about"])
            self.status.configure(text=LOCALIZATION[self.language]["ready"])
        except Exception as e:
            logging.error(f"Error updating UI texts: {e}")

    def toggle_auto_refresh(self):
        if self.auto_refresh_toggle.get():
            self.start_auto_refresh()
        else:
            self.stop_auto_refresh()

    def start_auto_refresh(self):
        self.refresh_list()
        self.auto_refresh_id = self.root.after(self.auto_refresh_interval, self.start_auto_refresh)

    def stop_auto_refresh(self):
        if self.auto_refresh_id:
            self.root.after_cancel(self.auto_refresh_id)
            self.auto_refresh_id = None

    def refresh_list(self):
        try:
            self.window_listbox.delete(0, tk.END)
            self.window_list = []
            windows = gw.getAllWindows()
            for window in windows:
                if window.title and window.visible and not window.isMinimized:
                    self.window_list.append(window.title)
                    self.window_listbox.insert(tk.END, window.title)
            self.status.configure(text=LOCALIZATION[self.language]["window_list_refreshed"])
        except Exception as e:
            logging.error(f"Error refreshing window list: {e}")
            self.status.configure(text=LOCALIZATION[self.language]["error"])

    def select_window(self, event=None):
        try:
            selection_index = self.window_listbox.curselection()
            if not selection_index:
                return
            selection = self.window_listbox.get(selection_index[0]).strip()
            window = gw.getWindowsWithTitle(selection)[0]
            self.selected_hwnd = window._hWnd

            styles = GetWindowLong(self.selected_hwnd, GWL_EXSTYLE)
            alpha = 255
            if styles & WS_EX_LAYERED:
                alpha = 255
            self.original_states[self.selected_hwnd] = (styles, alpha)

            if self.selected_hwnd not in self.history:
                self.history[self.selected_hwnd] = deque(maxlen=self.max_history)
                self.save_settings({
                    'transparency': 255,
                    'blur': False,
                    'blur_type': LOCALIZATION[self.language]["blur_type"][0],
                    'blur_opacity': 0,
                    'blur_intensity': 0,
                    'tint_opacity': 0
                })
            self.status.configure(text=LOCALIZATION[self.language]["selected"].format(selection))
            self.apply_settings(self.history[self.selected_hwnd][-1])
        except IndexError:
            self.status.configure(text=LOCALIZATION[self.language]["window_not_found"])
        except Exception as e:
            logging.error(f"Error selecting window: {e}")
            self.status.configure(text=LOCALIZATION[self.language]["error"])

    def update_transparency(self, value):
        if self.selected_hwnd:
            try:
                alpha = int(value)
                if make_window_transparent(self.selected_hwnd, alpha):
                    self.save_settings({'transparency': alpha})
                    self.status.configure(text=LOCALIZATION[self.language]["transparency_set"].format(alpha))
                else:
                    self.status.configure(text=LOCALIZATION[self.language]["error"])
            except Exception as e:
                logging.error(f"Error updating transparency: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def toggle_blur(self):
        if self.selected_hwnd:
            try:
                state = self.blur_toggle.get()
                settings = {'blur': state}
                if state:
                    if not is_dwm_composition_enabled():
                        messagebox.showerror(LOCALIZATION[self.language]["error"], LOCALIZATION[self.language]["window_incompatible"])
                        self.blur_toggle.deselect()
                        return
                    blur_type = ACCENT_ENABLE_ACRYLICBLURBEHIND if self.blur_type.get() == LOCALIZATION[self.language]["blur_type"][1] else ACCENT_ENABLE_BLURBEHIND
                    opacity = int(self.blur_opacity_scale.get())
                    intensity = int(self.blur_intensity_scale.get())
                    if enable_blur(self.selected_hwnd, blur_type, opacity, intensity):
                        settings.update({
                            'blur_type': self.blur_type.get(),
                            'blur_opacity': opacity,
                            'blur_intensity': intensity,
                            'tint_opacity': int(self.tint_opacity_scale.get())
                        })
                        self.status.configure(text=LOCALIZATION[self.language]["blur_enabled"])
                    else:
                        messagebox.showerror(LOCALIZATION[self.language]["error"], LOCALIZATION[self.language]["window_incompatible"])
                        self.blur_toggle.deselect()
                else:
                    original_styles, original_alpha = self.original_states.get(self.selected_hwnd, (0, 255))
                    if disable_blur(self.selected_hwnd, original_styles, original_alpha):
                        self.status.configure(text=LOCALIZATION[self.language]["blur_disabled"])
                    else:
                        self.status.configure(text=LOCALIZATION[self.language]["error"])
                self.save_settings(settings)
            except Exception as e:
                logging.error(f"Error toggling blur: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def update_blur_type(self, value):
        if self.selected_hwnd and self.blur_toggle.get():
            try:
                blur_type = ACCENT_ENABLE_ACRYLICBLURBEHIND if value == LOCALIZATION[self.language]["blur_type"][1] else ACCENT_ENABLE_BLURBEHIND
                opacity = int(self.blur_opacity_scale.get())
                intensity = int(self.blur_intensity_scale.get())
                if enable_blur(self.selected_hwnd, blur_type, opacity, intensity):
                    self.save_settings({
                        'blur_type': value,
                        'blur_opacity': opacity,
                        'blur_intensity': intensity,
                        'tint_opacity': int(self.tint_opacity_scale.get())
                    })
                    self.status.configure(text=LOCALIZATION[self.language]["blur_type_set"].format(value))
                else:
                    self.status.configure(text=LOCALIZATION[self.language]["error"])
            except Exception as e:
                logging.error(f"Error updating blur type: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def update_blur_opacity(self, value):
        if self.selected_hwnd and self.blur_toggle.get():
            try:
                opacity = int(value)
                blur_type = ACCENT_ENABLE_ACRYLICBLURBEHIND if self.blur_type.get() == LOCALIZATION[self.language]["blur_type"][1] else ACCENT_ENABLE_BLURBEHIND
                intensity = int(self.blur_intensity_scale.get())
                if enable_blur(self.selected_hwnd, blur_type, opacity, intensity):
                    self.save_settings({
                        'blur_opacity': opacity,
                        'blur_intensity': intensity,
                        'tint_opacity': int(self.tint_opacity_scale.get())
                    })
                    self.status.configure(text=LOCALIZATION[self.language]["blur_opacity_set"].format(opacity))
                else:
                    self.status.configure(text=LOCALIZATION[self.language]["error"])
            except Exception as e:
                logging.error(f"Error updating blur opacity: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def update_blur_intensity(self, value):
        if self.selected_hwnd and self.blur_toggle.get():
            try:
                intensity = int(value)
                blur_type = ACCENT_ENABLE_ACRYLICBLURBEHIND if self.blur_type.get() == LOCALIZATION[self.language]["blur_type"][1] else ACCENT_ENABLE_BLURBEHIND
                opacity = int(self.blur_opacity_scale.get())
                if enable_blur(self.selected_hwnd, blur_type, opacity, intensity):
                    self.save_settings({
                        'blur_intensity': intensity,
                        'blur_opacity': opacity,
                        'tint_opacity': int(self.tint_opacity_scale.get())
                    })
                    self.status.configure(text=LOCALIZATION[self.language]["blur_intensity_set"].format(intensity))
                else:
                    self.status.configure(text=LOCALIZATION[self.language]["error"])
            except Exception as e:
                logging.error(f"Error updating blur intensity: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def update_tint_opacity(self, value):
        if self.selected_hwnd and self.blur_toggle.get():
            try:
                tint_opacity = int(value)
                blur_type = ACCENT_ENABLE_ACRYLICBLURBEHIND if self.blur_type.get() == LOCALIZATION[self.language]["blur_type"][1] else ACCENT_ENABLE_BLURBEHIND
                opacity = int(self.blur_opacity_scale.get())
                intensity = int(self.blur_intensity_scale.get())
                if enable_blur(self.selected_hwnd, blur_type, opacity, intensity):
                    self.save_settings({
                        'tint_opacity': tint_opacity,
                        'blur_opacity': opacity,
                        'blur_intensity': intensity
                    })
                    self.status.configure(text=LOCALIZATION[self.language]["tint_opacity_set"].format(tint_opacity))
                else:
                    self.status.configure(text=LOCALIZATION[self.language]["error"])
            except Exception as e:
                logging.error(f"Error updating tint opacity: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def save_profile(self):
        if self.selected_hwnd:
            try:
                profile_name = tk.simpledialog.askstring("Save Profile", "Enter profile name:")
                if profile_name:
                    window_title = self.window_listbox.get(self.window_listbox.curselection()[0]).strip()
                    self.profiles[profile_name] = {
                        'window_title': window_title,
                        'settings': self.history[self.selected_hwnd][-1]
                    }
                    self.save_profiles()
                    self.status.configure(text=LOCALIZATION[self.language]["profile_saved"])
            except Exception as e:
                logging.error(f"Error saving profile: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["profile_error"])

    def load_profile(self):
        if self.selected_hwnd:
            try:
                profile_names = list(self.profiles.keys())
                if not profile_names:
                    self.status.configure(text=LOCALIZATION[self.language]["profile_error"])
                    return
                profile_name = tk.StringVar()
                dialog = ctk.CTkToplevel(self.root)
                dialog.title("Load Profile")
                dialog.geometry("300x150")
                ctk.CTkLabel(dialog, text="Select Profile:", font=("Roboto", 12)).pack(pady=10)
                profile_menu = ctk.CTkOptionMenu(dialog, values=profile_names, variable=profile_name)
                profile_menu.pack(pady=5)
                ctk.CTkButton(dialog, text="Load", command=lambda: self.apply_profile(profile_name.get(), dialog)).pack(pady=10)
            except Exception as e:
                logging.error(f"Error loading profile: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["profile_error"])

    def apply_profile(self, profile_name, dialog):
        try:
            profile = self.profiles.get(profile_name)
            if not profile:
                self.status.configure(text=LOCALIZATION[self.language]["profile_error"])
                return
            window_title = profile['window_title']
            settings = profile['settings']
            windows = gw.getWindowsWithTitle(window_title)
            if not windows:
                self.status.configure(text=LOCALIZATION[self.language]["window_not_found"])
                return
            self.selected_hwnd = windows[0]._hWnd
            self.history[self.selected_hwnd] = deque(maxlen=self.max_history)
            self.history[self.selected_hwnd].append(settings)
            self.apply_settings(settings)
            self.status.configure(text=LOCALIZATION[self.language]["profile_loaded"])
            dialog.destroy()
        except Exception as e:
            logging.error(f"Error applying profile: {e}")
            self.status.configure(text=LOCALIZATION[self.language]["profile_error"])

    def save_settings(self, settings):
        if self.selected_hwnd:
            try:
                current = self.history[self.selected_hwnd][-1].copy() if self.history[self.selected_hwnd] else {
                    'transparency': 255,
                    'blur': False,
                    'blur_type': LOCALIZATION[self.language]["blur_type"][0],
                    'blur_opacity': 0,
                    'blur_intensity': 0,
                    'tint_opacity': 0
                }
                current.update(settings)
                self.history[self.selected_hwnd].append(current)
            except Exception as e:
                logging.error(f"Error saving settings: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def undo(self):
        if self.selected_hwnd and len(self.history[self.selected_hwnd]) > 1:
            try:
                self.history[self.selected_hwnd].pop()
                settings = self.history[self.selected_hwnd][-1]
                self.apply_settings(settings)
                self.status.configure(text=LOCALIZATION[self.language]["changes_undone"])
            except Exception as e:
                logging.error(f"Error undoing changes: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])
        else:
            self.status.configure(text=LOCALIZATION[self.language]["nothing_to_undo"])

    def reset_window(self):
        if self.selected_hwnd:
            try:
                original_styles, original_alpha = self.original_states.get(self.selected_hwnd, (0, 255))
                if disable_blur(self.selected_hwnd, original_styles, original_alpha):
                    self.history[self.selected_hwnd].clear()
                    self.save_settings({
                        'transparency': 255,
                        'blur': False,
                        'blur_type': LOCALIZATION[self.language]["blur_type"][0],
                        'blur_opacity': 0,
                        'blur_intensity': 0,
                        'tint_opacity': 0
                    })
                    self.apply_settings(self.history[self.selected_hwnd][-1])
                    self.status.configure(text=LOCALIZATION[self.language]["reset_complete"])
                else:
                    self.status.configure(text=LOCALIZATION[self.language]["error"])
            except Exception as e:
                logging.error(f"Error resetting window: {e}")
                self.status.configure(text=LOCALIZATION[self.language]["error"])

    def apply_settings(self, settings):
        try:
            self.transparency_scale.set(settings['transparency'])
            self.blur_toggle.deselect() if not settings['blur'] else self.blur_toggle.select()
            self.blur_type.set(settings['blur_type'])
            self.blur_opacity_scale.set(settings['blur_opacity'])
            self.blur_intensity_scale.set(settings['blur_intensity'])
            self.tint_opacity_scale.set(settings['tint_opacity'])

            if self.selected_hwnd:
                make_window_transparent(self.selected_hwnd, settings['transparency'])
                if settings['blur']:
                    blur_type = ACCENT_ENABLE_ACRYLICBLURBEHIND if settings['blur_type'] == LOCALIZATION[self.language]["blur_type"][1] else ACCENT_ENABLE_BLURBEHIND
                    enable_blur(self.selected_hwnd, blur_type, settings['blur_opacity'], settings['blur_intensity'])
                else:
                    original_styles, original_alpha = self.original_states.get(self.selected_hwnd, (0, 255))
                    disable_blur(self.selected_hwnd, original_styles, original_alpha)
        except Exception as e:
            logging.error(f"Error applying settings: {e}")
            self.status.configure(text=LOCALIZATION[self.language]["error"])

if __name__ == "__main__":
    root = ctk.CTk()
    app = CustomBlurApp(root)
    root.mainloop()
